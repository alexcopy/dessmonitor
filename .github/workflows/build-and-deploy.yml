name: CI / CD – DessMonitor

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  IMAGE_NAME: redcopy/dessmonitor
  DOCKER_BUILDKIT: 1

jobs:
# ────────────────────────────── 1️⃣  Build + Push ──────────────────────────────
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️  Checkout
        uses: actions/checkout@v4

      # кешируем pip‑пакеты
      - name: ♻️  Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️  Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

# ────────────────────────────── 2️⃣  Deploy (k3s) ─────────────────────────────
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    # step/job выполняется, ТОЛЬКО если секрет задан
    if: ${{ secrets.KUBE_CONFIG }}

    env:
      NAMESPACE: dess                # ← при желании поменяйте
      RELEASE:   dessmonitor
      IMAGE:     ${{ env.IMAGE_NAME }}:${{ github.sha }}

    steps:
      - name: 🛎️  Checkout (manifests)
        uses: actions/checkout@v4

      - name: 📦  Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.29.2            # любая подходящая

      - name: 🛠  Prepare kube‑config
        run: |
          mkdir -p "$HOME/.kube"
          echo "${{ secrets.KUBE_CONFIG }}" > "$HOME/.kube/config"
          chmod 600 "$HOME/.kube/config"

      # ─── деплой ───
      - name: 🚀  kubectl apply
        run: |
          # если в манифесте есть placeholder для образа – заменяем «на лету»
          sed "s|IMAGE_PLACEHOLDER|${IMAGE}|g" k8s/dessmonitor-deployment.yaml | \
            kubectl -n "$NAMESPACE" apply -f -
          kubectl -n "$NAMESPACE" rollout status deploy/${RELEASE}
