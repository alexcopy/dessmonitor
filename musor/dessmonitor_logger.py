#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import time
import hashlib
import urllib.request
import urllib.parse
import json
import sys
import logging

# --- [–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ] –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å paho.mqtt –¥–ª—è MQTT-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ---
mqtt_available = True
try:
    import paho.mqtt.client as mqtt
except ImportError:
    mqtt_available = False

########################################
# 1) –ß–¢–ï–ù–ò–ï –ö–û–ù–§–ò–ì–ê (config.json)
########################################

CONFIG_FILE = "config.json"
try:
    with open(CONFIG_FILE, "r") as f:
        config = json.load(f)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {CONFIG_FILE}: {e}")
    sys.exit(1)

EMAIL = config.get("email")
PASSWORD = config.get("password")
COMPANY_KEY = config.get("company_key", "")  # –º–æ–∂–µ—Ç –±—ã—Ç—å "company-key"
PN = config.get("pn")
DEV_CODE = config.get("devcode")
DEV_ADDR = config.get("devaddr", 1)
SN = config.get("sn")
INTERVAL = config.get("interval", 30)
LOG_FILE = config.get("log_file", "dessmonitor.log")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MQTT
mqtt_conf = config.get("mqtt", {})
MQTT_ENABLED = mqtt_conf.get("enabled", False)
MQTT_HOST = mqtt_conf.get("host", "localhost")
MQTT_PORT = mqtt_conf.get("port", 1883)
MQTT_TOPIC = mqtt_conf.get("topic", "home/dessmonitor")
MQTT_USER = mqtt_conf.get("username", "")
MQTT_PASS = mqtt_conf.get("password", "")

########################################
# 2) –ö–û–ù–°–¢–ê–ù–¢–´ / –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
########################################

API_BASE = "http://api.dessmonitor.com/public/"  # –û—Å–Ω–æ–≤–Ω–æ–π URL API
APP_ID = "com.demo.test"  # –ü—Ä–∏–º–µ—Ä ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
APP_VERSION = "3.6.2.1"  # –ü—Ä–∏–º–µ—Ä –≤–µ—Ä—Å–∏–∏
APP_CLIENT = "python"  # –ú–æ–∂–µ–º —É–∫–∞–∑–∞—Ç—å "android" / "ios" / "web"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
token = None
secret = None
token_expiry = None
token_acquired_time = None

# –§–∞–π–ª –¥–ª—è –ª–æ–≥–∞
try:
    logfh = open(LOG_FILE, "a", buffering=1)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –±—É–¥–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞—Ç—å
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞ {LOG_FILE}: {e}")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MQTT-–∫–ª–∏–µ–Ω—Ç (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
mqtt_client = None
if MQTT_ENABLED:
    if not mqtt_available:
        print("‚ö† MQTT –≤–∫–ª—é—á—ë–Ω, –Ω–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ paho-mqtt –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û—Ç–∫–ª—é—á–∞–µ–º MQTT.")
        MQTT_ENABLED = False
    else:
        mqtt_client = mqtt.Client(client_id="dessmonitor_logger_py")
        if MQTT_USER:
            mqtt_client.username_pw_set(MQTT_USER, MQTT_PASS)
        try:
            mqtt_client.connect(MQTT_HOST, MQTT_PORT, keepalive=60)
            mqtt_client.loop_start()
            print(f"[INFO] –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ MQTT-–±—Ä–æ–∫–µ—Ä—É {MQTT_HOST}:{MQTT_PORT}, —Ç–æ–ø–∏–∫='{MQTT_TOPIC}'")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT-–±—Ä–æ–∫–µ—Ä—É: {e}")
            MQTT_ENABLED = False


########################################
# 3) –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–î–ü–ò–°–ò –ò –ó–ê–ü–†–û–°–û–í
########################################

def generate_sign(params_str, use_password=False):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º sign (–ø–æ–¥–ø–∏—Å—å) –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:
      - –µ—Å–ª–∏ use_password=True ‚Üí SHA-1(salt + SHA-1(password) + params_str)
      - –∏–Ω–∞—á–µ (–æ–±—ã—á–Ω—ã–µ –≤—ã–∑–æ–≤—ã) ‚Üí SHA-1(salt + secret + token + params_str)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (sign, salt).
    """
    global token, secret, PASSWORD
    salt = str(int(time.time() * 1000))  # —Ç–µ–∫—É—â–∞—è –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º—Å
    if use_password:
        # –•–µ—à –ø–∞—Ä–æ–ª—è
        pwd_hash = hashlib.sha1(PASSWORD.encode('utf-8')).hexdigest()
        raw = salt + pwd_hash + params_str
    else:
        if not secret or not token:
            raise RuntimeError("–ù–µ—Ç secret –∏–ª–∏ token –¥–ª—è –ø–æ–¥–ø–∏—Å–∏.")
        raw = salt + secret + token + params_str

    sign = hashlib.sha1(raw.encode('utf-8')).hexdigest()
    return sign, salt


def do_api_request(params, need_auth=True):
    """
    –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ DESSMonitor API.
    params: dict —Å –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ (action, pn, sn –∏ —Ç.–¥.)
    need_auth: –µ—Å–ª–∏ True, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º token+secret; –µ—Å–ª–∏ False (–¥–ª—è authSource), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-–æ—Ç–≤–µ—Ç –∫–∞–∫ dict.
    """
    # –î–æ–±–∞–≤–∏–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params["source"] = "1"  # —Ç–∏–ø
    params["_app_client_"] = APP_CLIENT
    params["_app_id_"] = APP_ID
    params["_app_version_"] = APP_VERSION

    # –°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç—å query –ø–æ—Å–ª–µ "?"
    query_str = "&".join(
        f"{urllib.parse.quote_plus(str(k))}={urllib.parse.quote_plus(str(v))}" for k, v in params.items())

    if need_auth:
        # sign = SHA1(salt + secret + token + '&' + query_str)
        sign, salt = generate_sign("&" + query_str, use_password=False)
        url = f"{API_BASE}?sign={sign}&salt={salt}&token={token}&{query_str}"
    else:
        # authSource
        sign, salt = generate_sign("&" + query_str, use_password=True)
        url = f"{API_BASE}?sign={sign}&salt={salt}&{query_str}"

    # –ó–∞–ø—Ä–æ—Å
    try:
        with urllib.request.urlopen(url, timeout=10) as resp:
            raw_data = resp.read()
        data = json.loads(raw_data.decode('utf-8'))
        return data
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")


########################################
# 4) –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –¢–û–ö–ï–ù–ê
########################################

def authenticate():
    """
    –í—ã–∑—ã–≤–∞–µ–º action=authSource, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å token + secret.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç company_key, email (usr) –∏ –ø–∞—Ä–æ–ª—å (–≤–º–µ—Å—Ç–µ —Å sign).
    """
    global token, secret, token_expiry, token_acquired_time
    print("[INFO] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (authSource)...")

    params = {
        "action": "authSource",
        "usr": EMAIL,
        "company-key": COMPANY_KEY,
        # pwd –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–æ, –æ–Ω —É—á–∞—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤ sign
    }
    result = do_api_request(params, need_auth=False)

    err = result.get("err")
    if err != 0:
        raise RuntimeError(f"authSource –Ω–µ—É–¥–∞—á–Ω–æ: {result.get('desc', 'Unknown error')}")

    dat = result.get("dat", {})
    token = dat.get("token")
    secret = dat.get("secret")
    token_expiry = dat.get("expire")  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    token_acquired_time = time.time()

    if not token or not secret:
        raise RuntimeError("–ù–µ –ø–æ–ª—É—á–∏–ª–∏ token/secret –æ—Ç authSource.")

    print("[INFO] –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å. –ü–æ–ª—É—á–µ–Ω token.")


def refresh_token():
    """
    –í—ã–∑—ã–≤–∞–µ–º action=updateToken –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞.
    """
    global token, secret, token_expiry, token_acquired_time
    print("[INFO] –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω (updateToken)...")

    params = {
        "action": "updateToken",
    }
    result = do_api_request(params, need_auth=True)

    if result.get("err") != 0:
        raise RuntimeError(f"updateToken –Ω–µ—É–¥–∞—á–Ω–æ: {result.get('desc')}")

    dat = result.get("dat", {})
    new_token = dat.get("token")
    new_secret = dat.get("secret")
    new_expire = dat.get("expire")

    if new_token:  token = new_token
    if new_secret: secret = new_secret
    if new_expire: token_expiry = new_expire
    token_acquired_time = time.time()

    print("[INFO] –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω.")


########################################
# 5) –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ó–ê–ü–†–û–°–ê –î–ê–ù–ù–´–• –° –£–°–¢–†–û–ô–°–¢–í–ê
########################################
def parse_and_display_data(data):
    battery_voltage = None
    working_state = None
    timestamp = None

    for item in data["dat"]:
        if item["title"] == "Battery Voltage":
            battery_voltage = item["val"]
        if item["title"] == "Working State":
            working_state = item["val"]
        if item["title"] == "Timestamp":
            timestamp = item["val"]

        print(f"Title:{item['title']} = {item['val']}")

    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    source = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if working_state:
        if working_state == "Line Mode":
            source = "‚ö° –°–µ—Ç—å"
        elif working_state == "Battery Mode":
            source = "üîã –ë–∞—Ç–∞—Ä–µ—è"
        elif working_state == "PV Mode":
            source = "‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω—ã–µ –ø–∞–Ω–µ–ª–∏"
        elif working_state == "Power Saving Mode":
            source = "üí§ –≠–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ"
        elif working_state == "Standby Mode":
            source = "‚è∏Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ"
        elif working_state == "Bypass Mode":
            source = "‚Ü™Ô∏è Bypass"
        elif working_state == "Fault Mode":
            source = "‚ùå –û—à–∏–±–∫–∞"

    log_line = f"[Device: {timestamp}] - Battery: {battery_voltage} V | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {working_state} ‚Üí {source}"
    print(log_line)
    logging.info(log_line)


def fetch_device_data():
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º action=queryDeviceLastData, –ø–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è:
      - Battery Voltage
      - –†–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º (Battery/Grid)
      - Charge/Discharge
      - SOC, –µ—Å–ª–∏ –µ—Å—Ç—å
      - device_time
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º dict c –∫–ª—é—á–∞–º–∏: device_time, battery_voltage, mode, charge_status, battery_soc
    """
    params = {
        "action": "queryDeviceLastData",
        "i18n": "en_US",  # –ª–∏–±–æ zh_CN, en_US ...
        "pn": PN,
        "devcode": DEV_CODE,
        "devaddr": DEV_ADDR,
        "sn": SN
    }
    result = do_api_request(params, need_auth=True)


    if result.get("err") != 0:
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å "TOKEN_EXPIRED" –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        code = result.get("err")
        desc = result.get("desc", "")
        if "TOKEN" in desc or code == 0x0002:
            raise RuntimeError("TOKEN_EXPIRED")
        raise RuntimeError(f"–û—à–∏–±–∫–∞ queryDeviceLastData: {desc}")

    parse_and_display_data(result)
    data_list = result.get("dat", [])
    # data_list - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤: { "title":"", "val":"", "unit":"..." }

    parsed = {
        "device_time": time.strftime("%Y-%m-%d %H:%M:%S"),  # default fallback
        "battery_voltage": None,
        "mode": None,
        "charge_status": None,
        "battery_soc": None
    }

    battery_current = None

    for item in data_list:
        title = (item.get("title") or "").strip()
        val = (item.get("val") or "").strip()
        unit = item.get("unit", "")

        # possible device time
        if title.lower() in ["Êó∂Èó¥Êà≥", "timestamp", "time"]:
            parsed["device_time"] = val

        # battery voltage
        if "Battery Voltage" in title or "ÁîµÊ±†ÁîµÂéã" in title:
            try:
                parsed["battery_voltage"] = float(val)
            except:
                parsed["battery_voltage"] = val

        # battery current
        if "Battery Current" in title or "ÁîµÊ±†ÁîµÊµÅ" in title:
            try:
                battery_current = float(val)
            except:
                battery_current = None

        # mode or run mode
        if "Mode" in title or "ËøêË°åÊ®°Âºè" in title or "Work Mode" in title:
            parsed["mode"] = val  # might be "Battery Mode" or "Line Mode" etc.

        # charge status
        if "Charge Status" in title or "Charging Status" in title or "ÂÖÖÁîµÁä∂ÊÄÅ" in title:
            parsed["charge_status"] = val

        # battery SOC
        if "SOC" in title or "ÁîµÊ±†SOC" in title:
            try:
                parsed["battery_soc"] = float(val)
            except:
                parsed["battery_soc"] = val

    # –ï—Å–ª–∏ parsed["mode"] –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å battery_current
    # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–≤–µ—Å—Ç–∏ mode=BATTERY/GRID, charge_status=CHARGING/DISCHARGING
    # –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ "Mode" / "Charge Status"
    mode = parsed["mode"]
    status = parsed["charge_status"]

    def guess_mode_and_status():
        nonlocal mode, status, battery_current
        # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
        if isinstance(battery_current, float):
            if abs(battery_current) < 0.1:
                # —Ç–æ–∫–∞ –ø–æ—á—Ç–∏ –Ω–µ—Ç
                return ("GRID", "IDLE")  # —É—Å–ª–æ–≤–Ω–æ
            elif battery_current > 0:
                # —Ä–∞–∑—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏
                return ("BATTERY", "DISCHARGING")
            else:
                # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫ - –∑–∞—Ä—è–¥
                return ("GRID", "CHARGING")
        # fallback
        return (None, None)

    if not mode or not status:
        m, s = guess_mode_and_status()
        if not mode:
            mode = m
        if not status:
            status = s
        parsed["mode"] = mode
        parsed["charge_status"] = status

    return parsed


########################################
# 6) –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ
########################################

def main_loop():
    global token, token_expiry, token_acquired_time

    # 1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    try:
        authenticate()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        logfh.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} AUTH_ERROR: {e}\n")
        sys.exit(1)

    print(f"[INFO] –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ {INTERVAL} —Å–µ–∫—É–Ω–¥...")

    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω
            if token_expiry:
                elapsed = time.time() - token_acquired_time
                if elapsed >= 0.9 * token_expiry:
                    refresh_token()

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            data = fetch_device_data()


            # –ü—Ä–∏–º–µ—Ä: 2025-04-10 13:41:06 [Device: 2025-04-10 13:40:59] - Battery: 52.1 V, Mode: GRID, Status: CHARGING
            now_str = time.strftime("%Y-%m-%d %H:%M:%S")
            dev_time = data.get("device_time", now_str)
            bv = data.get("battery_voltage")
            mode = data.get("mode")
            st = data.get("charge_status")
            soc = data.get("battery_soc")

            parts = []
            if bv is not None:
                if isinstance(bv, (int, float)):
                    parts.append(f"Battery: {bv:.1f} V")
                else:
                    parts.append(f"Battery: {bv} V")
            if mode: parts.append(f"Mode: {mode}")
            if st:   parts.append(f"Status: {st}")
            if soc is not None:
                if isinstance(soc, (int, float)):
                    parts.append(f"SOC: {soc:.1f}%")
                else:
                    parts.append(f"SOC: {soc}%")

            line = f"{now_str} [Device: {dev_time}] - " + ", ".join(parts)

            print(line)
            logfh.write(line + "\n")

            # –ü—É–±–ª–∏–∫—É–µ–º –≤ MQTT (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if MQTT_ENABLED and mqtt_client:
                try:
                    payload = json.dumps(data)
                    mqtt_client.publish(MQTT_TOPIC, payload, qos=0, retain=False)
                except Exception as e_mqtt:
                    print(f"‚ö† –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ MQTT: {e_mqtt}")

        except RuntimeError as e:
            if str(e) == "TOKEN_EXPIRED":
                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
                try:
                    refresh_token()
                    # –ò —Å—Ä–∞–∑—É –ø–æ–≤—Ç–æ—Ä–∏–º –∑–∞–ø—Ä–æ—Å
                    data = fetch_device_data()
                    # ... –¥–∞–ª–µ–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–≤–æ–¥–∞/–ª–æ–≥–∞
                    now_str = time.strftime("%Y-%m-%d %H:%M:%S")
                    dev_time = data.get("device_time", now_str)
                    bv = data.get("battery_voltage")
                    mode = data.get("mode")
                    st = data.get("charge_status")
                    soc = data.get("battery_soc")

                    parts = []
                    if bv is not None:
                        if isinstance(bv, (int, float)):
                            parts.append(f"Battery: {bv:.1f} V")
                        else:
                            parts.append(f"Battery: {bv} V")
                    if mode: parts.append(f"Mode: {mode}")
                    if st:   parts.append(f"Status: {st}")
                    if soc is not None:
                        if isinstance(soc, (int, float)):
                            parts.append(f"SOC: {soc:.1f}%")
                        else:
                            parts.append(f"SOC: {soc}%")

                    line = f"{now_str} [Device: {dev_time}] - " + ", ".join(parts)

                    print(line)
                    logfh.write(line + "\n")
                    # MQTT
                    if MQTT_ENABLED and mqtt_client:
                        try:
                            payload = json.dumps(data)
                            mqtt_client.publish(MQTT_TOPIC, payload)
                        except Exception as e_mqtt:
                            print(f"‚ö† –û—à–∏–±–∫–∞ MQTT: {e_mqtt}")
                except Exception as e2:
                    print(f"‚ùå –°–±–æ–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e2}")
                    logfh.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} REFRESH_ERROR: {e2}\n")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                logfh.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} ERROR: {e}\n")
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            logfh.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} EXCEPTION: {e}\n")

        time.sleep(INTERVAL)


########################################
# 7) –ó–ê–ü–£–°–ö
########################################

if __name__ == "__main__":
    try:
        main_loop()
    except KeyboardInterrupt:
        print("\n[INFO] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ Ctrl+C...")
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if mqtt_client and MQTT_ENABLED:
            mqtt_client.loop_stop()
            mqtt_client.disconnect()
        logfh.close()
        sys.exit(0)
